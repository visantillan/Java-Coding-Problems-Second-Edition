// Generated by jextract

package c.lib.math;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;

import static java.lang.foreign.ValueLayout.*;

public class math_h {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef char* va_list;
     *}
     */
    public static final AddressLayout va_list = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef unsigned long long size_t;
     *}
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long ssize_t;
     *}
     */
    public static final OfLong ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long rsize_t;
     *}
     */
    public static final OfLong rsize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long intptr_t;
     *}
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long uintptr_t;
     *}
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long ptrdiff_t;
     *}
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short wchar_t;
     *}
     */
    public static final OfShort wchar_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short wint_t;
     *}
     */
    public static final OfShort wint_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short wctype_t;
     *}
     */
    public static final OfShort wctype_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int errno_t;
     *}
     */
    public static final OfInt errno_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time32_t;
     *}
     */
    public static final OfInt __time32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __time64_t;
     *}
     */
    public static final OfLong __time64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long time_t;
     *}
     */
    public static final OfLong time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct threadlocaleinfostruct* pthreadlocinfo;
     *}
     */
    public static final AddressLayout pthreadlocinfo = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct threadmbcinfostruct* pthreadmbcinfo;
     *}
     */
    public static final AddressLayout pthreadmbcinfo = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct localeinfo_struct* _locale_t;
     *}
     */
    public static final AddressLayout _locale_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct tagLC_ID* LPLC_ID;
     *}
     */
    public static final AddressLayout LPLC_ID = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef float float_t;
     *}
     */
    public static final OfFloat float_t = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double double_t;
     *}
     */
    public static final OfDouble double_t = JAVA_DOUBLE;

    /**
     * {@snippet :
     * #define MINGW_HAS_SECURE_API 1
     *}
     */
    public static int MINGW_HAS_SECURE_API() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_MAJOR 6
     *}
     */
    public static int __MINGW64_VERSION_MAJOR() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_MINOR 0
     *}
     */
    public static int __MINGW64_VERSION_MINOR() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_BUGFIX 0
     *}
     */
    public static int __MINGW64_VERSION_BUGFIX() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_RC 0
     *}
     */
    public static int __MINGW64_VERSION_RC() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __MINGW32_MAJOR_VERSION 3
     *}
     */
    public static int __MINGW32_MAJOR_VERSION() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * #define __MINGW32_MINOR_VERSION 11
     *}
     */
    public static int __MINGW32_MINOR_VERSION() {
        return (int) 11L;
    }

    /**
     * {@snippet :
     * #define _ 1
     *}
     */
    public static int __() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW_USE_UNDERSCORE_PREFIX 0
     *}
     */
    public static int __MINGW_USE_UNDERSCORE_PREFIX() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define __MINGW_HAVE_ANSI_C99_PRINTF 1
     *}
     */
    public static int __MINGW_HAVE_ANSI_C99_PRINTF() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW_HAVE_WIDE_C99_PRINTF 1
     *}
     */
    public static int __MINGW_HAVE_WIDE_C99_PRINTF() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW_HAVE_ANSI_C99_SCANF 1
     *}
     */
    public static int __MINGW_HAVE_ANSI_C99_SCANF() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW_HAVE_WIDE_C99_SCANF 1
     *}
     */
    public static int __MINGW_HAVE_WIDE_C99_SCANF() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MINGW_GCC_VERSION 0
     *}
     */
    public static int __MINGW_GCC_VERSION() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES 0
     *}
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY 0
     *}
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 0
     *}
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT 0
     *}
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY 0
     *}
     */
    public static int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY() {
        return (int) 0L;
    }

    /**
     * {@snippet :
     * #define USE___UUIDOF 1
     *}
     */
    public static int USE___UUIDOF() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __CRT__NO_INLINE 1
     *}
     */
    public static int __CRT__NO_INLINE() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define __MSVCRT_VERSION__ 1792
     *}
     */
    public static int __MSVCRT_VERSION__() {
        return (int) 1792L;
    }

    /**
     * {@snippet :
     * #define _WIN32_WINNT 1282
     *}
     */
    public static int _WIN32_WINNT() {
        return (int) 1282L;
    }

    /**
     * {@snippet :
     * #define __MINGW_HAS_DXSDK 1
     *}
     */
    public static int __MINGW_HAS_DXSDK() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define MINGW_HAS_DDRAW_H 1
     *}
     */
    public static int MINGW_HAS_DDRAW_H() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define MINGW_DDRAW_VERSION 7
     *}
     */
    public static int MINGW_DDRAW_VERSION() {
        return (int) 7L;
    }

    /**
     * {@snippet :
     * #define MINGW_HAS_DDK_H 1
     *}
     */
    public static int MINGW_HAS_DDK_H() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _CRT_PACKING 8
     *}
     */
    public static int _CRT_PACKING() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define _SECURECRT_FILL_BUFFER_PATTERN 253
     *}
     */
    public static int _SECURECRT_FILL_BUFFER_PATTERN() {
        return (int) 253L;
    }

    /**
     * {@snippet :
     * #define _ARGMAX 100
     *}
     */
    public static int _ARGMAX() {
        return (int) 100L;
    }

    /**
     * {@snippet :
     * #define _DOMAIN 1
     *}
     */
    public static int _DOMAIN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _SING 2
     *}
     */
    public static int _SING() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * #define _OVERFLOW 3
     *}
     */
    public static int _OVERFLOW() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * #define _UNDERFLOW 4
     *}
     */
    public static int _UNDERFLOW() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * #define _TLOSS 5
     *}
     */
    public static int _TLOSS() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * #define _PLOSS 6
     *}
     */
    public static int _PLOSS() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * #define __MINGW_FPCLASS_DEFINED 1
     *}
     */
    public static int __MINGW_FPCLASS_DEFINED() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_SNAN 1
     *}
     */
    public static int _FPCLASS_SNAN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_QNAN 2
     *}
     */
    public static int _FPCLASS_QNAN() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_NINF 4
     *}
     */
    public static int _FPCLASS_NINF() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_NN 8
     *}
     */
    public static int _FPCLASS_NN() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_ND 16
     *}
     */
    public static int _FPCLASS_ND() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_NZ 32
     *}
     */
    public static int _FPCLASS_NZ() {
        return (int) 32L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_PZ 64
     *}
     */
    public static int _FPCLASS_PZ() {
        return (int) 64L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_PD 128
     *}
     */
    public static int _FPCLASS_PD() {
        return (int) 128L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_PN 256
     *}
     */
    public static int _FPCLASS_PN() {
        return (int) 256L;
    }

    /**
     * {@snippet :
     * #define _FPCLASS_PINF 512
     *}
     */
    public static int _FPCLASS_PINF() {
        return (int) 512L;
    }

    /**
     * {@snippet :
     * #define EDOM 33
     *}
     */
    public static int EDOM() {
        return (int) 33L;
    }

    /**
     * {@snippet :
     * #define ERANGE 34
     *}
     */
    public static int ERANGE() {
        return (int) 34L;
    }

    /**
     * {@snippet :
     * #define FP_NAN 256
     *}
     */
    public static int FP_NAN() {
        return (int) 256L;
    }

    /**
     * {@snippet :
     * #define FP_NORMAL 1024
     *}
     */
    public static int FP_NORMAL() {
        return (int) 1024L;
    }

    /**
     * {@snippet :
     * #define FP_ZERO 16384
     *}
     */
    public static int FP_ZERO() {
        return (int) 16384L;
    }

    public static MethodHandle __mingw_get_crt_info$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1, "__mingw_get_crt_info");
    }

    /**
     * {@snippet :
     * char* __mingw_get_crt_info();
     *}
     */
    public static MemorySegment __mingw_get_crt_info() {
        var mh$ = __mingw_get_crt_info$MH();
        try {
            return (java.lang.foreign.MemorySegment) mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout __imp__HUGE$LAYOUT() {
        return RuntimeHelper.POINTER;
    }

    public static VarHandle __imp__HUGE$VH() {
        return constants$7.const$4;
    }

    public static MemorySegment __imp__HUGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$7.const$5, "__imp__HUGE");
    }

    /**
     * Getter for variable:
     * {@snippet :
     * double* __imp__HUGE;
     *}
     */
    public static MemorySegment __imp__HUGE$get() {
        return (java.lang.foreign.MemorySegment) constants$7.const$4.get(RuntimeHelper.requireNonNull(constants$7.const$5, "__imp__HUGE"));
    }

    /**
     * Setter for variable:
     * {@snippet :
     * double* __imp__HUGE;
     *}
     */
    public static void __imp__HUGE$set(MemorySegment x) {
        constants$7.const$4.set(RuntimeHelper.requireNonNull(constants$7.const$5, "__imp__HUGE"), x);
    }

    public static MethodHandle __mingw_raise_matherr$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$1, "__mingw_raise_matherr");
    }

    /**
     * {@snippet :
     * void __mingw_raise_matherr(int typ, char* name, double a1, double a2, double rslt);
     *}
     */
    public static void __mingw_raise_matherr(int typ, MemorySegment name, double a1, double a2, double rslt) {
        var mh$ = __mingw_raise_matherr$MH();
        try {
            mh$.invokeExact(typ, name, a1, a2, rslt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __mingw_setusermatherr$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$6, "__mingw_setusermatherr");
    }

    /**
     * {@snippet :
     * void __mingw_setusermatherr(int (*)(struct _exception*));
     *}
     */
    public static void __mingw_setusermatherr(MemorySegment x0) {
        var mh$ = __mingw_setusermatherr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __setusermatherr$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1, "__setusermatherr");
    }

    /**
     * {@snippet :
     * void __setusermatherr(int (*)(struct _exception*));
     *}
     */
    public static void __setusermatherr(MemorySegment x0) {
        var mh$ = __setusermatherr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$3, "sin");
    }

    /**
     * {@snippet :
     * double sin(double _X);
     *}
     */
    public static double sin(double _X) {
        var mh$ = sin$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4, "cos");
    }

    /**
     * {@snippet :
     * double cos(double _X);
     *}
     */
    public static double cos(double _X) {
        var mh$ = cos$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$5, "tan");
    }

    /**
     * {@snippet :
     * double tan(double _X);
     *}
     */
    public static double tan(double _X) {
        var mh$ = tan$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0, "sinh");
    }

    /**
     * {@snippet :
     * double sinh(double _X);
     *}
     */
    public static double sinh(double _X) {
        var mh$ = sinh$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1, "cosh");
    }

    /**
     * {@snippet :
     * double cosh(double _X);
     *}
     */
    public static double cosh(double _X) {
        var mh$ = cosh$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2, "tanh");
    }

    /**
     * {@snippet :
     * double tanh(double _X);
     *}
     */
    public static double tanh(double _X) {
        var mh$ = tanh$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3, "asin");
    }

    /**
     * {@snippet :
     * double asin(double _X);
     *}
     */
    public static double asin(double _X) {
        var mh$ = asin$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4, "acos");
    }

    /**
     * {@snippet :
     * double acos(double _X);
     *}
     */
    public static double acos(double _X) {
        var mh$ = acos$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5, "atan");
    }

    /**
     * {@snippet :
     * double atan(double _X);
     *}
     */
    public static double atan(double _X) {
        var mh$ = atan$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1, "atan2");
    }

    /**
     * {@snippet :
     * double atan2(double _Y, double _X);
     *}
     */
    public static double atan2(double _Y, double _X) {
        var mh$ = atan2$MH();
        try {
            return (double) mh$.invokeExact(_Y, _X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2, "exp");
    }

    /**
     * {@snippet :
     * double exp(double _X);
     *}
     */
    public static double exp(double _X) {
        var mh$ = exp$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3, "log");
    }

    /**
     * {@snippet :
     * double log(double _X);
     *}
     */
    public static double log(double _X) {
        var mh$ = log$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4, "log10");
    }

    /**
     * {@snippet :
     * double log10(double _X);
     *}
     */
    public static double log10(double _X) {
        var mh$ = log10$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5, "pow");
    }

    /**
     * {@snippet :
     * double pow(double _X, double _Y);
     *}
     */
    public static double pow(double _X, double _Y) {
        var mh$ = pow$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0, "sqrt");
    }

    /**
     * {@snippet :
     * double sqrt(double _X);
     *}
     */
    public static double sqrt(double _X) {
        var mh$ = sqrt$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1, "ceil");
    }

    /**
     * {@snippet :
     * double ceil(double _X);
     *}
     */
    public static double ceil(double _X) {
        var mh$ = ceil$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2, "floor");
    }

    /**
     * {@snippet :
     * double floor(double _X);
     *}
     */
    public static double floor(double _X) {
        var mh$ = floor$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4, "fabsf");
    }

    /**
     * {@snippet :
     * float fabsf(float x);
     *}
     */
    public static float fabsf(float x) {
        var mh$ = fabsf$MH();
        try {
            return (float) mh$.invokeExact(x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fabsl$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5, "fabsl");
    }

    /**
     * {@snippet :
     * long double fabsl(long double);
     *}
     */
    public static double fabsl(double x0) {
        var mh$ = fabsl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$0, "fabs");
    }

    /**
     * {@snippet :
     * double fabs(double _X);
     *}
     */
    public static double fabs(double _X) {
        var mh$ = fabs$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2, "ldexp");
    }

    /**
     * {@snippet :
     * double ldexp(double _X, int _Y);
     *}
     */
    public static double ldexp(double _X, int _Y) {
        var mh$ = ldexp$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4, "frexp");
    }

    /**
     * {@snippet :
     * double frexp(double _X, int* _Y);
     *}
     */
    public static double frexp(double _X, MemorySegment _Y) {
        var mh$ = frexp$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5, "modf");
    }

    /**
     * {@snippet :
     * double modf(double _X, double* _Y);
     *}
     */
    public static double modf(double _X, MemorySegment _Y) {
        var mh$ = modf$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0, "fmod");
    }

    /**
     * {@snippet :
     * double fmod(double _X, double _Y);
     *}
     */
    public static double fmod(double _X, double _Y) {
        var mh$ = fmod$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sincos$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2, "sincos");
    }

    /**
     * {@snippet :
     * void sincos(double __x, double* p_sin, double* p_cos);
     *}
     */
    public static void sincos(double __x, MemorySegment p_sin, MemorySegment p_cos) {
        var mh$ = sincos$MH();
        try {
            mh$.invokeExact(__x, p_sin, p_cos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sincosl$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3, "sincosl");
    }

    /**
     * {@snippet :
     * void sincosl(long double __x, long double* p_sin, long double* p_cos);
     *}
     */
    public static void sincosl(double __x, MemorySegment p_sin, MemorySegment p_cos) {
        var mh$ = sincosl$MH();
        try {
            mh$.invokeExact(__x, p_sin, p_cos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sincosf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5, "sincosf");
    }

    /**
     * {@snippet :
     * void sincosf(float __x, float* p_sin, float* p_cos);
     *}
     */
    public static void sincosf(float __x, MemorySegment p_sin, MemorySegment p_cos) {
        var mh$ = sincosf$MH();
        try {
            mh$.invokeExact(__x, p_sin, p_cos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1, "abs");
    }

    /**
     * {@snippet :
     * int abs(int _X);
     *}
     */
    public static int abs(int _X) {
        var mh$ = abs$MH();
        try {
            return (int) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2, "labs");
    }

    /**
     * {@snippet :
     * long labs(long _X);
     *}
     */
    public static int labs(int _X) {
        var mh$ = labs$MH();
        try {
            return (int) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4, "atof");
    }

    /**
     * {@snippet :
     * double atof(char* _String);
     *}
     */
    public static double atof(MemorySegment _String) {
        var mh$ = atof$MH();
        try {
            return (double) mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _atof_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$6, "_atof_l");
    }

    /**
     * {@snippet :
     * double _atof_l(char* _String, _locale_t _Locale);
     *}
     */
    public static double _atof_l(MemorySegment _String, MemorySegment _Locale) {
        var mh$ = _atof_l$MH();
        try {
            return (double) mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _cabs$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4, "_cabs");
    }

    /**
     * {@snippet :
     * double _cabs(struct _complex _ComplexA);
     *}
     */
    public static double _cabs(MemorySegment _ComplexA) {
        var mh$ = _cabs$MH();
        try {
            return (double) mh$.invokeExact(_ComplexA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5, "_hypot");
    }

    /**
     * {@snippet :
     * double _hypot(double _X, double _Y);
     *}
     */
    public static double _hypot(double _X, double _Y) {
        var mh$ = _hypot$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _j0$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0, "_j0");
    }

    /**
     * {@snippet :
     * double _j0(double _X);
     *}
     */
    public static double _j0(double _X) {
        var mh$ = _j0$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _j1$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1, "_j1");
    }

    /**
     * {@snippet :
     * double _j1(double _X);
     *}
     */
    public static double _j1(double _X) {
        var mh$ = _j1$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _jn$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3, "_jn");
    }

    /**
     * {@snippet :
     * double _jn(int _X, double _Y);
     *}
     */
    public static double _jn(int _X, double _Y) {
        var mh$ = _jn$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _y0$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4, "_y0");
    }

    /**
     * {@snippet :
     * double _y0(double _X);
     *}
     */
    public static double _y0(double _X) {
        var mh$ = _y0$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _y1$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5, "_y1");
    }

    /**
     * {@snippet :
     * double _y1(double _X);
     *}
     */
    public static double _y1(double _X) {
        var mh$ = _y1$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _yn$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0, "_yn");
    }

    /**
     * {@snippet :
     * double _yn(int _X, double _Y);
     *}
     */
    public static double _yn(int _X, double _Y) {
        var mh$ = _yn$MH();
        try {
            return (double) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _matherr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1, "_matherr");
    }

    /**
     * {@snippet :
     * int _matherr(struct _exception*);
     *}
     */
    public static int _matherr(MemorySegment x0) {
        var mh$ = _matherr$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _chgsign$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2, "_chgsign");
    }

    /**
     * {@snippet :
     * double _chgsign(double _X);
     *}
     */
    public static double _chgsign(double _X) {
        var mh$ = _chgsign$MH();
        try {
            return (double) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3, "_copysign");
    }

    /**
     * {@snippet :
     * double _copysign(double _Number, double _Sign);
     *}
     */
    public static double _copysign(double _Number, double _Sign) {
        var mh$ = _copysign$MH();
        try {
            return (double) mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _logb$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4, "_logb");
    }

    /**
     * {@snippet :
     * double _logb(double);
     *}
     */
    public static double _logb(double x0) {
        var mh$ = _logb$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5, "_nextafter");
    }

    /**
     * {@snippet :
     * double _nextafter(double, double);
     *}
     */
    public static double _nextafter(double x0, double x1) {
        var mh$ = _nextafter$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0, "_scalb");
    }

    /**
     * {@snippet :
     * double _scalb(double, long);
     *}
     */
    public static double _scalb(double x0, int x1) {
        var mh$ = _scalb$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _finite$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2, "_finite");
    }

    /**
     * {@snippet :
     * int _finite(double);
     *}
     */
    public static int _finite(double x0) {
        var mh$ = _finite$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _fpclass$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3, "_fpclass");
    }

    /**
     * {@snippet :
     * int _fpclass(double);
     *}
     */
    public static int _fpclass(double x0) {
        var mh$ = _fpclass$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4, "_isnan");
    }

    /**
     * {@snippet :
     * int _isnan(double);
     *}
     */
    public static int _isnan(double x0) {
        var mh$ = _isnan$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5, "j0");
    }

    /**
     * {@snippet :
     * double j0(double);
     *}
     */
    public static double j0(double x0) {
        var mh$ = j0$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0, "j1");
    }

    /**
     * {@snippet :
     * double j1(double);
     *}
     */
    public static double j1(double x0) {
        var mh$ = j1$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1, "jn");
    }

    /**
     * {@snippet :
     * double jn(int, double);
     *}
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2, "y0");
    }

    /**
     * {@snippet :
     * double y0(double);
     *}
     */
    public static double y0(double x0) {
        var mh$ = y0$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3, "y1");
    }

    /**
     * {@snippet :
     * double y1(double);
     *}
     */
    public static double y1(double x0) {
        var mh$ = y1$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4, "yn");
    }

    /**
     * {@snippet :
     * double yn(int, double);
     *}
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle chgsign$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5, "chgsign");
    }

    /**
     * {@snippet :
     * double chgsign(double);
     *}
     */
    public static double chgsign(double x0) {
        var mh$ = chgsign$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0, "finite");
    }

    /**
     * {@snippet :
     * int finite(double);
     *}
     */
    public static int finite(double x0) {
        var mh$ = finite$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fpclass$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1, "fpclass");
    }

    /**
     * {@snippet :
     * int fpclass(double);
     *}
     */
    public static int fpclass(double x0) {
        var mh$ = fpclass$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout __INFF$LAYOUT() {
        return JAVA_FLOAT;
    }

    public static VarHandle __INFF$VH() {
        return constants$22.const$2;
    }

    public static MemorySegment __INFF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.const$3, "__INFF");
    }

    /**
     * Getter for variable:
     * {@snippet :
     * float __INFF;
     *}
     */
    public static float __INFF$get() {
        return (float) constants$22.const$2.get(RuntimeHelper.requireNonNull(constants$22.const$3, "__INFF"));
    }

    /**
     * Setter for variable:
     * {@snippet :
     * float __INFF;
     *}
     */
    public static void __INFF$set(float x) {
        constants$22.const$2.set(RuntimeHelper.requireNonNull(constants$22.const$3, "__INFF"), x);
    }

    public static MemoryLayout __INFL$LAYOUT() {
        return JAVA_DOUBLE;
    }

    public static VarHandle __INFL$VH() {
        return constants$22.const$4;
    }

    public static MemorySegment __INFL$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$22.const$5, "__INFL");
    }

    /**
     * Getter for variable:
     * {@snippet :
     * long double __INFL;
     *}
     */
    public static double __INFL$get() {
        return (double) constants$22.const$4.get(RuntimeHelper.requireNonNull(constants$22.const$5, "__INFL"));
    }

    /**
     * Setter for variable:
     * {@snippet :
     * long double __INFL;
     *}
     */
    public static void __INFL$set(double x) {
        constants$22.const$4.set(RuntimeHelper.requireNonNull(constants$22.const$5, "__INFL"), x);
    }

    public static MemoryLayout __QNANF$LAYOUT() {
        return JAVA_DOUBLE;
    }

    public static VarHandle __QNANF$VH() {
        return constants$22.const$4;
    }

    public static MemorySegment __QNANF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$23.const$0, "__QNANF");
    }

    /**
     * Getter for variable:
     * {@snippet :
     * double __QNANF;
     *}
     */
    public static double __QNANF$get() {
        return (double) constants$22.const$4.get(RuntimeHelper.requireNonNull(constants$23.const$0, "__QNANF"));
    }

    /**
     * Setter for variable:
     * {@snippet :
     * double __QNANF;
     *}
     */
    public static void __QNANF$set(double x) {
        constants$22.const$4.set(RuntimeHelper.requireNonNull(constants$23.const$0, "__QNANF"), x);
    }

    public static MethodHandle __fpclassifyl$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1, "__fpclassifyl");
    }

    /**
     * {@snippet :
     * int __fpclassifyl(long double);
     *}
     */
    public static int __fpclassifyl(double x0) {
        var mh$ = __fpclassifyl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$3, "__fpclassifyf");
    }

    /**
     * {@snippet :
     * int __fpclassifyf(float);
     *}
     */
    public static int __fpclassifyf(float x0) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4, "__fpclassify");
    }

    /**
     * {@snippet :
     * int __fpclassify(double);
     *}
     */
    public static int __fpclassify(double x0) {
        var mh$ = __fpclassify$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5, "__isnan");
    }

    /**
     * {@snippet :
     * int __isnan(double);
     *}
     */
    public static int __isnan(double x0) {
        var mh$ = __isnan$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0, "__isnanf");
    }

    /**
     * {@snippet :
     * int __isnanf(float);
     *}
     */
    public static int __isnanf(float x0) {
        var mh$ = __isnanf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __isnanl$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1, "__isnanl");
    }

    /**
     * {@snippet :
     * int __isnanl(long double);
     *}
     */
    public static int __isnanl(double x0) {
        var mh$ = __isnanl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2, "__signbit");
    }

    /**
     * {@snippet :
     * int __signbit(double);
     *}
     */
    public static int __signbit(double x0) {
        var mh$ = __signbit$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3, "__signbitf");
    }

    /**
     * {@snippet :
     * int __signbitf(float);
     *}
     */
    public static int __signbitf(float x0) {
        var mh$ = __signbitf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle __signbitl$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4, "__signbitl");
    }

    /**
     * {@snippet :
     * int __signbitl(long double);
     *}
     */
    public static int __signbitl(double x0) {
        var mh$ = __signbitl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5, "sinf");
    }

    /**
     * {@snippet :
     * float sinf(float _X);
     *}
     */
    public static float sinf(float _X) {
        var mh$ = sinf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinl$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0, "sinl");
    }

    /**
     * {@snippet :
     * long double sinl(long double);
     *}
     */
    public static double sinl(double x0) {
        var mh$ = sinl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1, "cosf");
    }

    /**
     * {@snippet :
     * float cosf(float _X);
     *}
     */
    public static float cosf(float _X) {
        var mh$ = cosf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cosl$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2, "cosl");
    }

    /**
     * {@snippet :
     * long double cosl(long double);
     *}
     */
    public static double cosl(double x0) {
        var mh$ = cosl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3, "tanf");
    }

    /**
     * {@snippet :
     * float tanf(float _X);
     *}
     */
    public static float tanf(float _X) {
        var mh$ = tanf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanl$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4, "tanl");
    }

    /**
     * {@snippet :
     * long double tanl(long double);
     *}
     */
    public static double tanl(double x0) {
        var mh$ = tanl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5, "asinf");
    }

    /**
     * {@snippet :
     * float asinf(float _X);
     *}
     */
    public static float asinf(float _X) {
        var mh$ = asinf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0, "asinl");
    }

    /**
     * {@snippet :
     * long double asinl(long double);
     *}
     */
    public static double asinl(double x0) {
        var mh$ = asinl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1, "acosf");
    }

    /**
     * {@snippet :
     * float acosf(float);
     *}
     */
    public static float acosf(float x0) {
        var mh$ = acosf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acosl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2, "acosl");
    }

    /**
     * {@snippet :
     * long double acosl(long double);
     *}
     */
    public static double acosl(double x0) {
        var mh$ = acosl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3, "atanf");
    }

    /**
     * {@snippet :
     * float atanf(float);
     *}
     */
    public static float atanf(float x0) {
        var mh$ = atanf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4, "atanl");
    }

    /**
     * {@snippet :
     * long double atanl(long double);
     *}
     */
    public static double atanl(double x0) {
        var mh$ = atanl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$6, "atan2f");
    }

    /**
     * {@snippet :
     * float atan2f(float, float);
     *}
     */
    public static float atan2f(float x0, float x1) {
        var mh$ = atan2f$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atan2l$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0, "atan2l");
    }

    /**
     * {@snippet :
     * long double atan2l(long double, long double);
     *}
     */
    public static double atan2l(double x0, double x1) {
        var mh$ = atan2l$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1, "sinhf");
    }

    /**
     * {@snippet :
     * float sinhf(float _X);
     *}
     */
    public static float sinhf(float _X) {
        var mh$ = sinhf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sinhl$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$2, "sinhl");
    }

    /**
     * {@snippet :
     * long double sinhl(long double);
     *}
     */
    public static double sinhl(double x0) {
        var mh$ = sinhl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3, "coshf");
    }

    /**
     * {@snippet :
     * float coshf(float _X);
     *}
     */
    public static float coshf(float _X) {
        var mh$ = coshf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle coshl$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4, "coshl");
    }

    /**
     * {@snippet :
     * long double coshl(long double);
     *}
     */
    public static double coshl(double x0) {
        var mh$ = coshl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5, "tanhf");
    }

    /**
     * {@snippet :
     * float tanhf(float _X);
     *}
     */
    public static float tanhf(float _X) {
        var mh$ = tanhf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tanhl$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0, "tanhl");
    }

    /**
     * {@snippet :
     * long double tanhl(long double);
     *}
     */
    public static double tanhl(double x0) {
        var mh$ = tanhl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1, "acosh");
    }

    /**
     * {@snippet :
     * double acosh(double);
     *}
     */
    public static double acosh(double x0) {
        var mh$ = acosh$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2, "acoshf");
    }

    /**
     * {@snippet :
     * float acoshf(float);
     *}
     */
    public static float acoshf(float x0) {
        var mh$ = acoshf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle acoshl$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3, "acoshl");
    }

    /**
     * {@snippet :
     * long double acoshl(long double);
     *}
     */
    public static double acoshl(double x0) {
        var mh$ = acoshl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4, "asinh");
    }

    /**
     * {@snippet :
     * double asinh(double);
     *}
     */
    public static double asinh(double x0) {
        var mh$ = asinh$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5, "asinhf");
    }

    /**
     * {@snippet :
     * float asinhf(float);
     *}
     */
    public static float asinhf(float x0) {
        var mh$ = asinhf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle asinhl$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0, "asinhl");
    }

    /**
     * {@snippet :
     * long double asinhl(long double);
     *}
     */
    public static double asinhl(double x0) {
        var mh$ = asinhl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1, "atanh");
    }

    /**
     * {@snippet :
     * double atanh(double);
     *}
     */
    public static double atanh(double x0) {
        var mh$ = atanh$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2, "atanhf");
    }

    /**
     * {@snippet :
     * float atanhf(float);
     *}
     */
    public static float atanhf(float x0) {
        var mh$ = atanhf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle atanhl$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3, "atanhl");
    }

    /**
     * {@snippet :
     * long double atanhl(long double);
     *}
     */
    public static double atanhl(double x0) {
        var mh$ = atanhl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4, "expf");
    }

    /**
     * {@snippet :
     * float expf(float _X);
     *}
     */
    public static float expf(float _X) {
        var mh$ = expf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expl$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5, "expl");
    }

    /**
     * {@snippet :
     * long double expl(long double);
     *}
     */
    public static double expl(double x0) {
        var mh$ = expl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0, "exp2");
    }

    /**
     * {@snippet :
     * double exp2(double);
     *}
     */
    public static double exp2(double x0) {
        var mh$ = exp2$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1, "exp2f");
    }

    /**
     * {@snippet :
     * float exp2f(float);
     *}
     */
    public static float exp2f(float x0) {
        var mh$ = exp2f$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle exp2l$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2, "exp2l");
    }

    /**
     * {@snippet :
     * long double exp2l(long double);
     *}
     */
    public static double exp2l(double x0) {
        var mh$ = exp2l$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3, "expm1");
    }

    /**
     * {@snippet :
     * double expm1(double);
     *}
     */
    public static double expm1(double x0) {
        var mh$ = expm1$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4, "expm1f");
    }

    /**
     * {@snippet :
     * float expm1f(float);
     *}
     */
    public static float expm1f(float x0) {
        var mh$ = expm1f$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle expm1l$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5, "expm1l");
    }

    /**
     * {@snippet :
     * long double expm1l(long double);
     *}
     */
    public static double expm1l(double x0) {
        var mh$ = expm1l$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1, "frexpf");
    }

    /**
     * {@snippet :
     * float frexpf(float _X, int* _Y);
     *}
     */
    public static float frexpf(float _X, MemorySegment _Y) {
        var mh$ = frexpf$MH();
        try {
            return (float) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle frexpl$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$2, "frexpl");
    }

    /**
     * {@snippet :
     * long double frexpl(long double, int*);
     *}
     */
    public static double frexpl(double x0, MemorySegment x1) {
        var mh$ = frexpl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3, "ilogb");
    }

    /**
     * {@snippet :
     * int ilogb(double);
     *}
     */
    public static int ilogb(double x0) {
        var mh$ = ilogb$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4, "ilogbf");
    }

    /**
     * {@snippet :
     * int ilogbf(float);
     *}
     */
    public static int ilogbf(float x0) {
        var mh$ = ilogbf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ilogbl$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5, "ilogbl");
    }

    /**
     * {@snippet :
     * int ilogbl(long double);
     *}
     */
    public static int ilogbl(double x0) {
        var mh$ = ilogbl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1, "ldexpf");
    }

    /**
     * {@snippet :
     * float ldexpf(float _X, int _Y);
     *}
     */
    public static float ldexpf(float _X, int _Y) {
        var mh$ = ldexpf$MH();
        try {
            return (float) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ldexpl$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2, "ldexpl");
    }

    /**
     * {@snippet :
     * long double ldexpl(long double, int);
     *}
     */
    public static double ldexpl(double x0, int x1) {
        var mh$ = ldexpl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$3, "logf");
    }

    /**
     * {@snippet :
     * float logf(float);
     *}
     */
    public static float logf(float x0) {
        var mh$ = logf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logl$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4, "logl");
    }

    /**
     * {@snippet :
     * long double logl(long double);
     *}
     */
    public static double logl(double x0) {
        var mh$ = logl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$5, "log10f");
    }

    /**
     * {@snippet :
     * float log10f(float);
     *}
     */
    public static float log10f(float x0) {
        var mh$ = log10f$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log10l$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0, "log10l");
    }

    /**
     * {@snippet :
     * long double log10l(long double);
     *}
     */
    public static double log10l(double x0) {
        var mh$ = log10l$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1, "log1p");
    }

    /**
     * {@snippet :
     * double log1p(double);
     *}
     */
    public static double log1p(double x0) {
        var mh$ = log1p$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2, "log1pf");
    }

    /**
     * {@snippet :
     * float log1pf(float);
     *}
     */
    public static float log1pf(float x0) {
        var mh$ = log1pf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log1pl$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3, "log1pl");
    }

    /**
     * {@snippet :
     * long double log1pl(long double);
     *}
     */
    public static double log1pl(double x0) {
        var mh$ = log1pl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4, "log2");
    }

    /**
     * {@snippet :
     * double log2(double);
     *}
     */
    public static double log2(double x0) {
        var mh$ = log2$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5, "log2f");
    }

    /**
     * {@snippet :
     * float log2f(float);
     *}
     */
    public static float log2f(float x0) {
        var mh$ = log2f$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle log2l$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0, "log2l");
    }

    /**
     * {@snippet :
     * long double log2l(long double);
     *}
     */
    public static double log2l(double x0) {
        var mh$ = log2l$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1, "logb");
    }

    /**
     * {@snippet :
     * double logb(double);
     *}
     */
    public static double logb(double x0) {
        var mh$ = logb$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2, "logbf");
    }

    /**
     * {@snippet :
     * float logbf(float);
     *}
     */
    public static float logbf(float x0) {
        var mh$ = logbf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle logbl$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3, "logbl");
    }

    /**
     * {@snippet :
     * long double logbl(long double);
     *}
     */
    public static double logbl(double x0) {
        var mh$ = logbl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4, "modff");
    }

    /**
     * {@snippet :
     * float modff(float, float*);
     *}
     */
    public static float modff(float x0, MemorySegment x1) {
        var mh$ = modff$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle modfl$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5, "modfl");
    }

    /**
     * {@snippet :
     * long double modfl(long double, long double*);
     *}
     */
    public static double modfl(double x0, MemorySegment x1) {
        var mh$ = modfl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0, "scalbn");
    }

    /**
     * {@snippet :
     * double scalbn(double, int);
     *}
     */
    public static double scalbn(double x0, int x1) {
        var mh$ = scalbn$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1, "scalbnf");
    }

    /**
     * {@snippet :
     * float scalbnf(float, int);
     *}
     */
    public static float scalbnf(float x0, int x1) {
        var mh$ = scalbnf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbnl$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2, "scalbnl");
    }

    /**
     * {@snippet :
     * long double scalbnl(long double, int);
     *}
     */
    public static double scalbnl(double x0, int x1) {
        var mh$ = scalbnl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3, "scalbln");
    }

    /**
     * {@snippet :
     * double scalbln(double, long);
     *}
     */
    public static double scalbln(double x0, int x1) {
        var mh$ = scalbln$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4, "scalblnf");
    }

    /**
     * {@snippet :
     * float scalblnf(float, long);
     *}
     */
    public static float scalblnf(float x0, int x1) {
        var mh$ = scalblnf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle scalblnl$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5, "scalblnl");
    }

    /**
     * {@snippet :
     * long double scalblnl(long double, long);
     *}
     */
    public static double scalblnl(double x0, int x1) {
        var mh$ = scalblnl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0, "cbrt");
    }

    /**
     * {@snippet :
     * double cbrt(double);
     *}
     */
    public static double cbrt(double x0) {
        var mh$ = cbrt$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1, "cbrtf");
    }

    /**
     * {@snippet :
     * float cbrtf(float);
     *}
     */
    public static float cbrtf(float x0) {
        var mh$ = cbrtf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle cbrtl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2, "cbrtl");
    }

    /**
     * {@snippet :
     * long double cbrtl(long double);
     *}
     */
    public static double cbrtl(double x0) {
        var mh$ = cbrtl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3, "hypot");
    }

    /**
     * {@snippet :
     * double hypot(double, double);
     *}
     */
    public static double hypot(double x0, double x1) {
        var mh$ = hypot$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4, "hypotf");
    }

    /**
     * {@snippet :
     * float hypotf(float x, float y);
     *}
     */
    public static float hypotf(float x, float y) {
        var mh$ = hypotf$MH();
        try {
            return (float) mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle hypotl$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5, "hypotl");
    }

    /**
     * {@snippet :
     * long double hypotl(long double, long double);
     *}
     */
    public static double hypotl(double x0, double x1) {
        var mh$ = hypotl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0, "powf");
    }

    /**
     * {@snippet :
     * float powf(float _X, float _Y);
     *}
     */
    public static float powf(float _X, float _Y) {
        var mh$ = powf$MH();
        try {
            return (float) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle powl$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1, "powl");
    }

    /**
     * {@snippet :
     * long double powl(long double, long double);
     *}
     */
    public static double powl(double x0, double x1) {
        var mh$ = powl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2, "sqrtf");
    }

    /**
     * {@snippet :
     * float sqrtf(float);
     *}
     */
    public static float sqrtf(float x0) {
        var mh$ = sqrtf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle sqrtl$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3, "sqrtl");
    }

    /**
     * {@snippet :
     * long double sqrtl(long double);
     *}
     */
    public static double sqrtl(double x0) {
        var mh$ = sqrtl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4, "erf");
    }

    /**
     * {@snippet :
     * double erf(double);
     *}
     */
    public static double erf(double x0) {
        var mh$ = erf$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5, "erff");
    }

    /**
     * {@snippet :
     * float erff(float);
     *}
     */
    public static float erff(float x0) {
        var mh$ = erff$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0, "erfl");
    }

    /**
     * {@snippet :
     * long double erfl(long double);
     *}
     */
    public static double erfl(double x0) {
        var mh$ = erfl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1, "erfc");
    }

    /**
     * {@snippet :
     * double erfc(double);
     *}
     */
    public static double erfc(double x0) {
        var mh$ = erfc$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2, "erfcf");
    }

    /**
     * {@snippet :
     * float erfcf(float);
     *}
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle erfcl$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3, "erfcl");
    }

    /**
     * {@snippet :
     * long double erfcl(long double);
     *}
     */
    public static double erfcl(double x0) {
        var mh$ = erfcl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4, "lgamma");
    }

    /**
     * {@snippet :
     * double lgamma(double);
     *}
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5, "lgammaf");
    }

    /**
     * {@snippet :
     * float lgammaf(float);
     *}
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lgammal$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0, "lgammal");
    }

    /**
     * {@snippet :
     * long double lgammal(long double);
     *}
     */
    public static double lgammal(double x0) {
        var mh$ = lgammal$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MemoryLayout signgam$LAYOUT() {
        return JAVA_INT;
    }

    public static VarHandle signgam$VH() {
        return constants$39.const$1;
    }

    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$39.const$2, "signgam");
    }

    /**
     * Getter for variable:
     * {@snippet :
     * int signgam;
     *}
     */
    public static int signgam$get() {
        return (int) constants$39.const$1.get(RuntimeHelper.requireNonNull(constants$39.const$2, "signgam"));
    }

    /**
     * Setter for variable:
     * {@snippet :
     * int signgam;
     *}
     */
    public static void signgam$set(int x) {
        constants$39.const$1.set(RuntimeHelper.requireNonNull(constants$39.const$2, "signgam"), x);
    }

    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3, "tgamma");
    }

    /**
     * {@snippet :
     * double tgamma(double);
     *}
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4, "tgammaf");
    }

    /**
     * {@snippet :
     * float tgammaf(float);
     *}
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle tgammal$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5, "tgammal");
    }

    /**
     * {@snippet :
     * long double tgammal(long double);
     *}
     */
    public static double tgammal(double x0) {
        var mh$ = tgammal$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0, "ceilf");
    }

    /**
     * {@snippet :
     * float ceilf(float);
     *}
     */
    public static float ceilf(float x0) {
        var mh$ = ceilf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle ceill$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1, "ceill");
    }

    /**
     * {@snippet :
     * long double ceill(long double);
     *}
     */
    public static double ceill(double x0) {
        var mh$ = ceill$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2, "floorf");
    }

    /**
     * {@snippet :
     * float floorf(float);
     *}
     */
    public static float floorf(float x0) {
        var mh$ = floorf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle floorl$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3, "floorl");
    }

    /**
     * {@snippet :
     * long double floorl(long double);
     *}
     */
    public static double floorl(double x0) {
        var mh$ = floorl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4, "nearbyint");
    }

    /**
     * {@snippet :
     * double nearbyint(double);
     *}
     */
    public static double nearbyint(double x0) {
        var mh$ = nearbyint$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5, "nearbyintf");
    }

    /**
     * {@snippet :
     * float nearbyintf(float);
     *}
     */
    public static float nearbyintf(float x0) {
        var mh$ = nearbyintf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nearbyintl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0, "nearbyintl");
    }

    /**
     * {@snippet :
     * long double nearbyintl(long double);
     *}
     */
    public static double nearbyintl(double x0) {
        var mh$ = nearbyintl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1, "rint");
    }

    /**
     * {@snippet :
     * double rint(double);
     *}
     */
    public static double rint(double x0) {
        var mh$ = rint$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2, "rintf");
    }

    /**
     * {@snippet :
     * float rintf(float);
     *}
     */
    public static float rintf(float x0) {
        var mh$ = rintf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle rintl$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3, "rintl");
    }

    /**
     * {@snippet :
     * long double rintl(long double);
     *}
     */
    public static double rintl(double x0) {
        var mh$ = rintl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4, "lrint");
    }

    /**
     * {@snippet :
     * long lrint(double);
     *}
     */
    public static int lrint(double x0) {
        var mh$ = lrint$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5, "lrintf");
    }

    /**
     * {@snippet :
     * long lrintf(float);
     *}
     */
    public static int lrintf(float x0) {
        var mh$ = lrintf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lrintl$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0, "lrintl");
    }

    /**
     * {@snippet :
     * long lrintl(long double);
     *}
     */
    public static int lrintl(double x0) {
        var mh$ = lrintl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2, "llrint");
    }

    /**
     * {@snippet :
     * long long llrint(double);
     *}
     */
    public static long llrint(double x0) {
        var mh$ = llrint$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4, "llrintf");
    }

    /**
     * {@snippet :
     * long long llrintf(float);
     *}
     */
    public static long llrintf(float x0) {
        var mh$ = llrintf$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llrintl$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5, "llrintl");
    }

    /**
     * {@snippet :
     * long long llrintl(long double);
     *}
     */
    public static long llrintl(double x0) {
        var mh$ = llrintl$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0, "round");
    }

    /**
     * {@snippet :
     * double round(double);
     *}
     */
    public static double round(double x0) {
        var mh$ = round$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1, "roundf");
    }

    /**
     * {@snippet :
     * float roundf(float);
     *}
     */
    public static float roundf(float x0) {
        var mh$ = roundf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle roundl$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2, "roundl");
    }

    /**
     * {@snippet :
     * long double roundl(long double);
     *}
     */
    public static double roundl(double x0) {
        var mh$ = roundl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3, "lround");
    }

    /**
     * {@snippet :
     * long lround(double);
     *}
     */
    public static int lround(double x0) {
        var mh$ = lround$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4, "lroundf");
    }

    /**
     * {@snippet :
     * long lroundf(float);
     *}
     */
    public static int lroundf(float x0) {
        var mh$ = lroundf$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle lroundl$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5, "lroundl");
    }

    /**
     * {@snippet :
     * long lroundl(long double);
     *}
     */
    public static int lroundl(double x0) {
        var mh$ = lroundl$MH();
        try {
            return (int) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$0, "llround");
    }

    /**
     * {@snippet :
     * long long llround(double);
     *}
     */
    public static long llround(double x0) {
        var mh$ = llround$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1, "llroundf");
    }

    /**
     * {@snippet :
     * long long llroundf(float);
     *}
     */
    public static long llroundf(float x0) {
        var mh$ = llroundf$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle llroundl$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2, "llroundl");
    }

    /**
     * {@snippet :
     * long long llroundl(long double);
     *}
     */
    public static long llroundl(double x0) {
        var mh$ = llroundl$MH();
        try {
            return (long) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3, "trunc");
    }

    /**
     * {@snippet :
     * double trunc(double);
     *}
     */
    public static double trunc(double x0) {
        var mh$ = trunc$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4, "truncf");
    }

    /**
     * {@snippet :
     * float truncf(float);
     *}
     */
    public static float truncf(float x0) {
        var mh$ = truncf$MH();
        try {
            return (float) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle truncl$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5, "truncl");
    }

    /**
     * {@snippet :
     * long double truncl(long double);
     *}
     */
    public static double truncl(double x0) {
        var mh$ = truncl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$0, "fmodf");
    }

    /**
     * {@snippet :
     * float fmodf(float, float);
     *}
     */
    public static float fmodf(float x0, float x1) {
        var mh$ = fmodf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmodl$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1, "fmodl");
    }

    /**
     * {@snippet :
     * long double fmodl(long double, long double);
     *}
     */
    public static double fmodl(double x0, double x1) {
        var mh$ = fmodl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2, "remainder");
    }

    /**
     * {@snippet :
     * double remainder(double, double);
     *}
     */
    public static double remainder(double x0, double x1) {
        var mh$ = remainder$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3, "remainderf");
    }

    /**
     * {@snippet :
     * float remainderf(float, float);
     *}
     */
    public static float remainderf(float x0, float x1) {
        var mh$ = remainderf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remainderl$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4, "remainderl");
    }

    /**
     * {@snippet :
     * long double remainderl(long double, long double);
     *}
     */
    public static double remainderl(double x0, double x1) {
        var mh$ = remainderl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$6, "remquo");
    }

    /**
     * {@snippet :
     * double remquo(double, double, int*);
     *}
     */
    public static double remquo(double x0, double x1, MemorySegment x2) {
        var mh$ = remquo$MH();
        try {
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1, "remquof");
    }

    /**
     * {@snippet :
     * float remquof(float, float, int*);
     *}
     */
    public static float remquof(float x0, float x1, MemorySegment x2) {
        var mh$ = remquof$MH();
        try {
            return (float) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle remquol$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2, "remquol");
    }

    /**
     * {@snippet :
     * long double remquol(long double, long double, int*);
     *}
     */
    public static double remquol(double x0, double x1, MemorySegment x2) {
        var mh$ = remquol$MH();
        try {
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3, "copysign");
    }

    /**
     * {@snippet :
     * double copysign(double, double);
     *}
     */
    public static double copysign(double x0, double x1) {
        var mh$ = copysign$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4, "copysignf");
    }

    /**
     * {@snippet :
     * float copysignf(float, float);
     *}
     */
    public static float copysignf(float x0, float x1) {
        var mh$ = copysignf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle copysignl$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5, "copysignl");
    }

    /**
     * {@snippet :
     * long double copysignl(long double, long double);
     *}
     */
    public static double copysignl(double x0, double x1) {
        var mh$ = copysignl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0, "nan");
    }

    /**
     * {@snippet :
     * double nan(char* tagp);
     *}
     */
    public static double nan(MemorySegment tagp) {
        var mh$ = nan$MH();
        try {
            return (double) mh$.invokeExact(tagp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2, "nanf");
    }

    /**
     * {@snippet :
     * float nanf(char* tagp);
     *}
     */
    public static float nanf(MemorySegment tagp) {
        var mh$ = nanf$MH();
        try {
            return (float) mh$.invokeExact(tagp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nanl$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3, "nanl");
    }

    /**
     * {@snippet :
     * long double nanl(char* tagp);
     *}
     */
    public static double nanl(MemorySegment tagp) {
        var mh$ = nanl$MH();
        try {
            return (double) mh$.invokeExact(tagp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4, "nextafter");
    }

    /**
     * {@snippet :
     * double nextafter(double, double);
     *}
     */
    public static double nextafter(double x0, double x1) {
        var mh$ = nextafter$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5, "nextafterf");
    }

    /**
     * {@snippet :
     * float nextafterf(float, float);
     *}
     */
    public static float nextafterf(float x0, float x1) {
        var mh$ = nextafterf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nextafterl$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0, "nextafterl");
    }

    /**
     * {@snippet :
     * long double nextafterl(long double, long double);
     *}
     */
    public static double nextafterl(double x0, double x1) {
        var mh$ = nextafterl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nexttoward$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1, "nexttoward");
    }

    /**
     * {@snippet :
     * double nexttoward(double, long double);
     *}
     */
    public static double nexttoward(double x0, double x1) {
        var mh$ = nexttoward$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nexttowardf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3, "nexttowardf");
    }

    /**
     * {@snippet :
     * float nexttowardf(float, long double);
     *}
     */
    public static float nexttowardf(float x0, double x1) {
        var mh$ = nexttowardf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle nexttowardl$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4, "nexttowardl");
    }

    /**
     * {@snippet :
     * long double nexttowardl(long double, long double);
     *}
     */
    public static double nexttowardl(double x0, double x1) {
        var mh$ = nexttowardl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5, "fdim");
    }

    /**
     * {@snippet :
     * double fdim(double x, double y);
     *}
     */
    public static double fdim(double x, double y) {
        var mh$ = fdim$MH();
        try {
            return (double) mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0, "fdimf");
    }

    /**
     * {@snippet :
     * float fdimf(float x, float y);
     *}
     */
    public static float fdimf(float x, float y) {
        var mh$ = fdimf$MH();
        try {
            return (float) mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fdiml$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1, "fdiml");
    }

    /**
     * {@snippet :
     * long double fdiml(long double x, long double y);
     *}
     */
    public static double fdiml(double x, double y) {
        var mh$ = fdiml$MH();
        try {
            return (double) mh$.invokeExact(x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2, "fmax");
    }

    /**
     * {@snippet :
     * double fmax(double, double);
     *}
     */
    public static double fmax(double x0, double x1) {
        var mh$ = fmax$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3, "fmaxf");
    }

    /**
     * {@snippet :
     * float fmaxf(float, float);
     *}
     */
    public static float fmaxf(float x0, float x1) {
        var mh$ = fmaxf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmaxl$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4, "fmaxl");
    }

    /**
     * {@snippet :
     * long double fmaxl(long double, long double);
     *}
     */
    public static double fmaxl(double x0, double x1) {
        var mh$ = fmaxl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5, "fmin");
    }

    /**
     * {@snippet :
     * double fmin(double, double);
     *}
     */
    public static double fmin(double x0, double x1) {
        var mh$ = fmin$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0, "fminf");
    }

    /**
     * {@snippet :
     * float fminf(float, float);
     *}
     */
    public static float fminf(float x0, float x1) {
        var mh$ = fminf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fminl$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1, "fminl");
    }

    /**
     * {@snippet :
     * long double fminl(long double, long double);
     *}
     */
    public static double fminl(double x0, double x1) {
        var mh$ = fminl$MH();
        try {
            return (double) mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3, "fma");
    }

    /**
     * {@snippet :
     * double fma(double, double, double);
     *}
     */
    public static double fma(double x0, double x1, double x2) {
        var mh$ = fma$MH();
        try {
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5, "fmaf");
    }

    /**
     * {@snippet :
     * float fmaf(float, float, float);
     *}
     */
    public static float fmaf(float x0, float x1, float x2) {
        var mh$ = fmaf$MH();
        try {
            return (float) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle fmal$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0, "fmal");
    }

    /**
     * {@snippet :
     * long double fmal(long double, long double, long double);
     *}
     */
    public static double fmal(double x0, double x1, double x2) {
        var mh$ = fmal$MH();
        try {
            return (double) mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1, "_copysignf");
    }

    /**
     * {@snippet :
     * float _copysignf(float _Number, float _Sign);
     *}
     */
    public static float _copysignf(float _Number, float _Sign) {
        var mh$ = _copysignf$MH();
        try {
            return (float) mh$.invokeExact(_Number, _Sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _chgsignf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2, "_chgsignf");
    }

    /**
     * {@snippet :
     * float _chgsignf(float _X);
     *}
     */
    public static float _chgsignf(float _X) {
        var mh$ = _chgsignf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3, "_logbf");
    }

    /**
     * {@snippet :
     * float _logbf(float _X);
     *}
     */
    public static float _logbf(float _X) {
        var mh$ = _logbf$MH();
        try {
            return (float) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4, "_nextafterf");
    }

    /**
     * {@snippet :
     * float _nextafterf(float _X, float _Y);
     *}
     */
    public static float _nextafterf(float _X, float _Y) {
        var mh$ = _nextafterf$MH();
        try {
            return (float) mh$.invokeExact(_X, _Y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5, "_finitef");
    }

    /**
     * {@snippet :
     * int _finitef(float _X);
     *}
     */
    public static int _finitef(float _X) {
        var mh$ = _finitef$MH();
        try {
            return (int) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0, "_isnanf");
    }

    /**
     * {@snippet :
     * int _isnanf(float _X);
     *}
     */
    public static int _isnanf(float _X) {
        var mh$ = _isnanf$MH();
        try {
            return (int) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _fpclassf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1, "_fpclassf");
    }

    /**
     * {@snippet :
     * int _fpclassf(float _X);
     *}
     */
    public static int _fpclassf(float _X) {
        var mh$ = _fpclassf$MH();
        try {
            return (int) mh$.invokeExact(_X);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    public static MethodHandle _chgsignl$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2, "_chgsignl");
    }

    /**
     * {@snippet :
     * long double _chgsignl(long double);
     *}
     */
    public static double _chgsignl(double x0) {
        var mh$ = _chgsignl$MH();
        try {
            return (double) mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_STR "6.0.0"
     *}
     */
    public static MemorySegment __MINGW64_VERSION_STR() {
        return constants$52.const$3;
    }

    /**
     * {@snippet :
     * #define __MINGW64_VERSION_STATE "alpha"
     *}
     */
    public static MemorySegment __MINGW64_VERSION_STATE() {
        return constants$52.const$4;
    }

    /**
     * {@snippet :
     * #define __MINGW_SEC_WARN_STR "This function or variable may be unsafe, use _CRT_SECURE_NO_WARNINGS to disable deprecation"
     *}
     */
    public static MemorySegment __MINGW_SEC_WARN_STR() {
        return constants$52.const$5;
    }

    /**
     * {@snippet :
     * #define __MINGW_MSVC2005_DEPREC_STR "This POSIX function is deprecated beginning in Visual C++ 2005, use _CRT_NONSTDC_NO_DEPRECATE to disable deprecation"
     *}
     */
    public static MemorySegment __MINGW_MSVC2005_DEPREC_STR() {
        return constants$53.const$0;
    }

    /**
     * {@snippet :
     * #define __STDC_SECURE_LIB__ 200411
     *}
     */
    public static int __STDC_SECURE_LIB__() {
        return (int) 200411L;
    }

    /**
     * {@snippet :
     * #define __GOT_SECURE_LIB__ 200411
     *}
     */
    public static int __GOT_SECURE_LIB__() {
        return (int) 200411L;
    }

    /**
     * {@snippet :
     * #define _TRUNCATE -1
     *}
     */
    public static long _TRUNCATE() {
        return -1L;
    }

    /**
     * {@snippet :
     * #define DOMAIN 1
     *}
     */
    public static int DOMAIN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define SING 2
     *}
     */
    public static int SING() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * #define OVERFLOW 3
     *}
     */
    public static int OVERFLOW() {
        return (int) 3L;
    }

    /**
     * {@snippet :
     * #define UNDERFLOW 4
     *}
     */
    public static int UNDERFLOW() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * #define TLOSS 5
     *}
     */
    public static int TLOSS() {
        return (int) 5L;
    }

    /**
     * {@snippet :
     * #define PLOSS 6
     *}
     */
    public static int PLOSS() {
        return (int) 6L;
    }

    /**
     * {@snippet :
     * #define M_E 2.718281828459045
     *}
     */
    public static double M_E() {
        return 2.718281828459045d;
    }

    /**
     * {@snippet :
     * #define M_LOG2E 1.4426950408889634
     *}
     */
    public static double M_LOG2E() {
        return 1.4426950408889634d;
    }

    /**
     * {@snippet :
     * #define M_LOG10E 0.4342944819032518
     *}
     */
    public static double M_LOG10E() {
        return 0.4342944819032518d;
    }

    /**
     * {@snippet :
     * #define M_LN2 0.6931471805599453
     *}
     */
    public static double M_LN2() {
        return 0.6931471805599453d;
    }

    /**
     * {@snippet :
     * #define M_LN10 2.302585092994046
     *}
     */
    public static double M_LN10() {
        return 2.302585092994046d;
    }

    /**
     * {@snippet :
     * #define M_PI 3.141592653589793
     *}
     */
    public static double M_PI() {
        return 3.141592653589793d;
    }

    /**
     * {@snippet :
     * #define M_PI_2 1.5707963267948966
     *}
     */
    public static double M_PI_2() {
        return 1.5707963267948966d;
    }

    /**
     * {@snippet :
     * #define M_PI_4 0.7853981633974483
     *}
     */
    public static double M_PI_4() {
        return 0.7853981633974483d;
    }

    /**
     * {@snippet :
     * #define M_1_PI 0.3183098861837907
     *}
     */
    public static double M_1_PI() {
        return 0.3183098861837907d;
    }

    /**
     * {@snippet :
     * #define M_2_PI 0.6366197723675814
     *}
     */
    public static double M_2_PI() {
        return 0.6366197723675814d;
    }

    /**
     * {@snippet :
     * #define M_2_SQRTPI 1.1283791670955126
     *}
     */
    public static double M_2_SQRTPI() {
        return 1.1283791670955126d;
    }

    /**
     * {@snippet :
     * #define M_SQRT2 1.4142135623730951
     *}
     */
    public static double M_SQRT2() {
        return 1.4142135623730951d;
    }

    /**
     * {@snippet :
     * #define M_SQRT1_2 0.7071067811865476
     *}
     */
    public static double M_SQRT1_2() {
        return 0.7071067811865476d;
    }

    /**
     * {@snippet :
     * #define FP_SNAN 1
     *}
     */
    public static int FP_SNAN() {
        return (int) 1L;
    }

    /**
     * {@snippet :
     * #define FP_QNAN 2
     *}
     */
    public static int FP_QNAN() {
        return (int) 2L;
    }

    /**
     * {@snippet :
     * #define FP_NINF 4
     *}
     */
    public static int FP_NINF() {
        return (int) 4L;
    }

    /**
     * {@snippet :
     * #define FP_PINF 512
     *}
     */
    public static int FP_PINF() {
        return (int) 512L;
    }

    /**
     * {@snippet :
     * #define FP_NDENORM 16
     *}
     */
    public static int FP_NDENORM() {
        return (int) 16L;
    }

    /**
     * {@snippet :
     * #define FP_PDENORM 128
     *}
     */
    public static int FP_PDENORM() {
        return (int) 128L;
    }

    /**
     * {@snippet :
     * #define FP_NZERO 32
     *}
     */
    public static int FP_NZERO() {
        return (int) 32L;
    }

    /**
     * {@snippet :
     * #define FP_PZERO 64
     *}
     */
    public static int FP_PZERO() {
        return (int) 64L;
    }

    /**
     * {@snippet :
     * #define FP_NNORM 8
     *}
     */
    public static int FP_NNORM() {
        return (int) 8L;
    }

    /**
     * {@snippet :
     * #define FP_PNORM 256
     *}
     */
    public static int FP_PNORM() {
        return (int) 256L;
    }

    /**
     * {@snippet :
     * #define FP_INFINITE 1280
     *}
     */
    public static int FP_INFINITE() {
        return (int) 1280L;
    }

    /**
     * {@snippet :
     * #define FP_SUBNORMAL 17408
     *}
     */
    public static int FP_SUBNORMAL() {
        return (int) 17408L;
    }

    /**
     * {@snippet :
     * #define FP_ILOGB0 -2147483648
     *}
     */
    public static int FP_ILOGB0() {
        return (int) -2147483648L;
    }

    /**
     * {@snippet :
     * #define FP_ILOGBNAN -2147483648
     *}
     */
    public static int FP_ILOGBNAN() {
        return (int) -2147483648L;
    }
}


